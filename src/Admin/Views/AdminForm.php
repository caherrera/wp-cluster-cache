<?php

namespace WpClusterCache\Admin\Views;

use WpClusterCache\Admin\Helpers\HtmlForm;
use WpClusterCache\Settings;
use WpClusterCache\UserProfile;

class AdminForm extends HtmlForm {

	protected $_html = [];

	public function __toString() {

		return $this->form( parent::__toString() ); // TODO: Change the autogenerated stub
	}


	public function printLdapSettings() {
		$hosts = (array) Settings::getHosts();

		return $this->table( [
			$this->inputSetting( Settings::getConfigNameOfHosts() . '[0]', 'Host 1', isset( $hosts[0] ) ? $hosts[0] : '', '' ),
			$this->inputSetting( Settings::getConfigNameOfHosts() . '[1]', 'Host 2', isset( $hosts[1] ) ? $hosts[1] : '', '' ),
			$this->inputSetting( Settings::getConfigNameOfHosts() . '[2]', 'Host 3', isset( $hosts[2] ) ? $hosts[2] : '', '' ),
			$this->inputSetting( Settings::getConfigNameOfHosts() . '[3]', 'Host 4', isset( $hosts[3] ) ? $hosts[3] : '', '' ),

			$this->inputSetting( Settings::getConfigNameOfPort(), 'Port', Settings::getPort(), '' ),
			$this->inputSetting( Settings::getConfigNameOfUsername(), 'Username', Settings::getUsername(), '' ),
			$this->inputSetting( Settings::getConfigNameOfPassword(), 'Password', Settings::getPassword(), '' ),
		] );
	}

	public function printFieldsToSync() {
		//username	email	nicename	nickname	Name	display_name	first_name	last_name	Cargo	Sucursal	Ubicación	Orden	Dependencia	Dependencia 2	Aniversario en Renta Nacional	Cumpleaños	Anexo	Asistente
		return $this->table( array_map( function ( $f ) {
			$name = $f->name;

			return $this->inputSetting( Settings::getConfigNameOfMap() . "[$name]", $name, Settings::getADField( $name ), '' );

		}, ( new UserProfile )->getUserFields() ) );
	}

	public function printFieldsToMatch() {
		$match   = (array) Settings::getMatch();
		$filters = (array) Settings::getFilters();

		return $this->table( [
			$this->inputMultiples( Settings::getConfigNameOfMatch(), "Match", $match, [ 'Ldap' => '', 'wp' => '' ] ),
			$this->inputMultiples( Settings::getConfigNameOfFilters(), "Extra Conditions", $filters, [ 'field' => '', 'operator' => '', 'value' => '' ] )


		] );
	}

	public function printLdapFilters() {
		$basedn = Settings::getBasedn();
		$expire = Settings::getCacheExpire();
		$dns    = (array) Settings::getDn();


		$rows = [
			$this->inputSetting( Settings::getConfigNameOfCacheExpire(), 'Cache Expire time in Seconds', $expire ?: '', '3600' ),
			$this->inputSetting( Settings::getConfigNameOfBasedn(), 'Base dn', $basedn ?: '', '' ),

		];
		for ( $i = 0; $i < 4; $i ++ ) {
			$dn     = $dns[ $i ] ?? '';
			$rows[] = $this->inputSetting( Settings::getConfigNameOfDn() . '[' . $i . ']', 'DN ' . ( $i + 1 ), $dn, '' );

		}


		return $this->table( $rows );
	}


}